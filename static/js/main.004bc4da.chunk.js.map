{"version":3,"sources":["components/GameWrapper/data.js","components/Timeline/index.js","components/GameBoard/index.js","components/GameWrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["GameData","this","data","Date","size","length","howmany","Math","floor","random","pickRandom","count","SortableItem","SortableElement","value","extraClass","className","Timeline","SortableContainer","items","disabled","map","index","key","name","GameBoard","state","Array","from","props","stillPlaying","onSortEnd","oldIndex","newIndex","setState","arrayMove","donePlaying","lockAxis","type","onClick","sortedItems","sort","a","b","date","itemsWithFlag","cloneDeep","console","log","React","Component","GameWrapper","someRandomEvents","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.004bc4da.chunk.js","sourcesContent":["import pickRandom from 'pick-random';\n\nclass GameData {\n\n    constructor() {\n        this.data = [\n            {\"name\": 'üèÖÔ∏è Inauguration JO moderne', \"date\": new Date(\"1896-04-06\")},\n            {\"name\": 'üë∂Ô∏è Naissance Andr√© Breton', \"date\": new Date(\"1896-02-18\")},\n            {\"name\": '‚ò†Ô∏è D√©c√®s Paul Verlaine', \"date\": new Date(\"1896-01-08\")},\n            {\"name\": 'üì∫Ô∏è Premi√®re Loft Story saison 1 (France)', \"date\": new Date(\"2001-04-26\")},\n            {\"name\": 'üïäÔ∏è Armistice de la Guerre de Cor√©e', \"date\": new Date(\"1953-07-27\")},\n            {\"name\": 'üá®üáøÔ∏è D√©but du Printemps de Prague', \"date\": new Date(\"1968-01-05\")},\n            {\"name\": '‚öΩÔ∏è Match de la honte (RFA‚ÄìAutriche)', \"date\": new Date(\"1982-06-25\")},\n            {\"name\": 'üë∂Ô∏è Naissance Victor Hugo', \"date\": new Date(\"1802-02-26\")},\n            {\"name\": '‚ò†Ô∏è D√©c√®s Victor Hugo', \"date\": new Date(\"1885-05-22\")},\n            {\"name\": '‚öΩÔ∏è 1√®re Finale de la Coupe des clubs champions europ√©ens', \"date\": new Date(\"1956-06-13\")},\n        ]\n        this.size = this.data.length\n    }\n\n    someRandomEvents() {\n        var howmany = 3 + Math.floor(Math.random() * Math.floor(5));\n        return pickRandom(this.data, {count: howmany});\n    }\n}\n\nexport default GameData;\n","import React from 'react';\nimport {SortableContainer, SortableElement} from 'react-sortable-hoc';\nimport './index.css';\n\nconst SortableItem = SortableElement(({value, extraClass}) => {\n    var className = \"sortable_list_element \" + (extraClass ? extraClass : \"\");\n    return (\n        <div className={className}>{value}</div>\n    );\n});\n\nconst Timeline = SortableContainer(({items, disabled}) => {\n  return (\n    <div className=\"sortable_list_container\">\n      <span>Moins r√©cent</span>\n      {items.map((value, index) => (\n        <SortableItem key={index} index={index} value={value.name} disabled={disabled} extraClass={value.extraClass} />\n      ))}\n      <span>Plus r√©cent</span>\n    </div>\n  );\n});\n\nexport default Timeline;\n","import React from 'react';\nimport arrayMove from 'array-move';\nimport cloneDeep from 'clone-deep';\n\nimport Timeline from '../Timeline';\nimport './index.css';\n\nexport default class GameBoard extends React.Component {\n  state = {\n    items: Array.from(this.props.items),\n    stillPlaying: true\n  };\n\n  onSortEnd = ({oldIndex, newIndex}) => {\n    this.setState(({items}) => ({\n      items: arrayMove(items, oldIndex, newIndex),\n    }));\n  };\n\n  donePlaying = () => {\n    if (this.state.stillPlaying) {\n        this.setState(({items}) => ({\n          stillPlaying: false\n        }));\n    }\n  };\n\n  render() {\n    if (this.state.stillPlaying) {\n        return (\n            <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col\">\n                <Timeline items={this.state.items} onSortEnd={this.onSortEnd} lockAxis=\"y\" disabled={false} />\n                </div>\n                <div className=\"col\">\n                </div>\n             </div>\n            <button type=\"button\" onClick={this.donePlaying} className=\"btn btn-primary\">Test</button>\n            </div>\n        )\n    } else {\n      var sortedItems = Array.from(this.state.items).sort((a, b) => a.date - b.date);\n      var itemsWithFlag = cloneDeep(this.state.items);\n      console.log(sortedItems);\n      console.log(itemsWithFlag);\n      if (itemsWithFlag[0].date <= sortedItems[0].date) {\n        itemsWithFlag[0].extraClass = \"answer_ok\";\n      } else {\n        itemsWithFlag[0].extraClass = \"answer_ko\";\n      }\n      for (let index = 1; index < itemsWithFlag.length; index++) {\n          if (itemsWithFlag[index-1].date <= itemsWithFlag[index].date) {\n            itemsWithFlag[index].extraClass = \"answer_ok\";\n          } else {\n            itemsWithFlag[index].extraClass = \"answer_ko\";\n          }\n      }\n      console.log(\"sortedItems\", sortedItems);\n      console.log(\"itemsWithFlag\", itemsWithFlag);\n      return (\n            <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col\">\n                <Timeline items={itemsWithFlag} onSortEnd={this.onSortEnd} lockAxis=\"y\" disabled={true} />\n                </div>\n                <div className=\"col\">\n                <Timeline items={sortedItems} onSortEnd={this.onSortEnd} lockAxis=\"y\" disabled={true} />\n                </div>\n             </div>\n            </div>\n        )\n    }\n  }\n}\n","import React from 'react';\n\nimport GameData from './data.js';\nimport GameBoard from '../GameBoard';\nimport './index.css';\n\nexport default class GameWrapper extends React.Component {\n\n  render() {\n    var items = new GameData().someRandomEvents();\n    return (\n        <GameBoard items={items} />\n    )\n  }\n}\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport GameWrapper from './components/GameWrapper';\n\nfunction App() {\n  return (\n    <div className=\"fullBody\">\n      <header>\n        <h1>R√©tablis l'ordre</h1>\n      </header>\n      <main>\n        <GameWrapper value=\"wesh\" />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}